# -----------------------------------------------------------------------
## Copyright (C) 2023- by Otacilio 'Minho' Neto, <otacilio.neto@aalto.fi>
# This code is part of the 'SystemLevelControl.jl' package, licensed by
# the MIT License (see <https://spdx.org/licenses/MIT.html> )                
# -----------------------------------------------------------------------
## This file defines the functions and auxiliary data-types for the 
##  synthesis of SLS controllers 

# FUNCTIONS _____________________________________________________________

"""
    SLS(P::AbstractGeneralizedPlant, S::AbstractVector)

Synthetise a controller for the plant decribed by `P` according to the spatiotemporal
localization constraints encoded by `S`. Currently (v0), only supports the design of 
Localized \$\\mathcal{H}_2\$ state/output-feedback controllers.

# Examples 
```julia-repl
julia> 
```
"""
function SLS(P::AbstractGeneralizedPlant, S::AbstractVector; J=[nothing], norm=:H2)
    if norm === :H2
        return SLS_H2(P, S, J);
    else        
        throw(ArgumentError("Incorrent norm argument. Currently, the synthesis is implemented for norms: {:H2}"));
    end
end # -- End of SLS

# _______________________________________________________________________
# INTERNAL FUNCTIONS ____________________________________________________

function SLS_H2(P::GeneralizedPlant{<:Number,Ts}, S::AbstractVector, J::AbstractVector) where {Ts<:StateFeedback}
    # Unpack the internal function arguments
    S‚Çì,S·µ§ = S;
    T = length(S‚Çì)

    # Auxiliary variables
    J = (J[1] === nothing) ? [[i] for i in 1:P.Nx] : J;
    ùìí = Iterators.partition(J, ceil(Int, length(J)/nworkers()));

    let P=P, T=T, S‚Çì=S‚Çì, S·µ§=S·µ§
    return @distributed (+) for C‚±º in collect(ùìí)
        _SLS_H2(C‚±º, P, T, S‚Çì, S·µ§, [nothing], 0)
    end
    end
end # -- End of SLS_H2 / StateFeedback

function SLS_H2(P::GeneralizedPlant{<:Number,Ts}, S::AbstractVector, J::AbstractVector) where {Ts<:OutputFeedback}
    # Unpack the internal function arguments
    S‚Çì‚Çì,S·µ§‚Çì,S‚Çì·µß,S·µ§·µß = S;
    T = length(S‚Çì‚Çì)
    
    # Auxiliary variables
    if J[1] === nothing 
        J = [[[i] for i in 1:(P.Nx+P.Ny)],
             [[i] for i in 1:(P.Nx+P.Nu)]]
    end

    ùìí‚Çì = Iterators.partition(J[1], ceil(Int, length(J[1])/nworkers()));
    ùìí·µß = Iterators.partition(J[2], ceil(Int, length(J[2])/nworkers()));
    
    # Adjusts the sparsity constraints for the primal and dual problems
    S‚Çì,S·µ§ = (hcat.(S‚Çì‚Çì,S‚Çì·µß), hcat.(S·µ§‚Çì,S·µ§·µß));
    S‚Çì_a,S·µ§_a = (vec(hcat.(S‚Çì‚Çì',S·µ§‚Çì')), vec(hcat.(S‚Çì·µß',S·µ§·µß')));
    
    œÅ = 50;
    Œõ = [[spzeros(size(_S‚Çì)) for _S‚Çì in S‚Çì], [spzeros(size(_S·µ§)) for _S·µ§ in S·µ§]];
    Œ® = [[spzeros(size(_S‚Çì)) for _S‚Çì in S‚Çì], [spzeros(size(_S·µ§)) for _S·µ§ in S·µ§]];

    # let P=P, T=T, S‚Çì=S‚Çì, S·µ§=S·µ§, S‚Çì_a=S‚Çì_a, S·µ§_a=S·µ§_a, Œõ=Œõ, Œ®=Œ®
    for _ in 1:100
        ŒΩ = vec(vcat.(Œ®...)) - vcat.(Œõ...);
        Œ¶ = @distributed (+) for C‚±º in collect(ùìí‚Çì)
            _SLS_H2(C‚±º, P, T, S‚Çì, S·µ§, ŒΩ, œÅ)
        end

        ŒΩ = vec(vcat.(Œ¶...)' - vcat.(Œõ...)');
        Œ® = @distributed (+) for C‚±º in collect(ùìí·µß) 
            _SLS_H2(C‚±º, P', T, S‚Çì_a, S·µ§_a, ŒΩ, œÅ)
        end

        Œ® = [[[Œ®ÃÉ[1][:,1:P.Nx]'     Œ®ÃÉ[2][:,1:P.Nx]']     for Œ®ÃÉ in zip(Œ®[1],Œ®[2])], 
             [[Œ®ÃÉ[1][:,1+P.Nx:end]' Œ®ÃÉ[2][:,1+P.Nx:end]'] for Œ®ÃÉ in zip(Œ®[1],Œ®[2])]]

        Œõ += (Œ¶ - Œ®)
    end
    # end # ADMM

    return Œõ
end # -- End of SLS_H2 / OutputFeedback


function _SLS_H2(C‚±º::AbstractVector, P::AbstractGeneralizedPlant, T::Integer, S‚Çì::AbstractVector, S·µ§::AbstractVector, ŒΩ::AbstractVector, œÅ::Real)
    # Allocates the SLS mappings
    Œ¶ÃÉ = [[spzeros(size(_S‚Çì)) for _S‚Çì in S‚Çì], [spzeros(size(_S·µ§)) for _S·µ§ in S·µ§]];
    
    # Optimization loop _________________________________________________
    for c‚±º in C‚±º
        # Obtains a reduced-order system based on the sparsity in ùì¢ = [S‚Çì, S·µ§]
        (PÃÉ,IÃÉ,i·µ£,s‚Çì,s·µ§) = sparsity_dim_reduction(P, c‚±º, S‚Çì, S·µ§);  

        # Slices the ADMM constant term (if needed)
        if ŒΩ[1] === nothing
            ŒΩÃÉ = [[spzeros(PÃÉ.Nx,PÃÉ.Nw) for _ in S‚Çì], 
                 [spzeros(PÃÉ.Nu,PÃÉ.Nw) for _ in S·µ§]];
        else
            ŒΩÃÉ = [[_ŒΩ[s‚Çì,c‚±º] for _ŒΩ in ŒΩ], 
                 [_ŒΩ[P.Nx.+s·µ§,c‚±º] for _ŒΩ in ŒΩ]];
        end

        # Solves the reduced-order SLS problem either by solving the KKT system (ECQP)
        #  or by shipping the optimization directly to the general solver (JuMP-based)
        if length(c‚±º) == 1
            _SLS_H2_ECQP!(Œ¶ÃÉ, c‚±º, PÃÉ, IÃÉ, i·µ£, T, S‚Çì, S·µ§, s‚Çì, s·µ§, ŒΩÃÉ, œÅ)
        else
            _SLS_H2_General!(Œ¶ÃÉ, c‚±º, PÃÉ, IÃÉ, i·µ£, T, S‚Çì, S·µ§, s‚Çì, s·µ§, ŒΩÃÉ, œÅ)
        end
    end
    # ___________________________________________________________________
    return Œ¶ÃÉ
# --
end 

function _SLS_H2_ECQP!(Œ¶ÃÉ::AbstractVector, c‚±º::AbstractVector, P::AbstractGeneralizedPlant, IÃÉ::AbstractMatrix, i·µ£::BitArray, T::Integer, S‚Çì::AbstractVector, S·µ§::AbstractVector, s‚Çì::AbstractVector, s·µ§::AbstractVector, ŒΩ::AbstractVector, œÅ::Real)
    ## Creates the Hessian matrix 
    œÉ = [P.B‚ÇÅ; P.D‚ÇÇ‚ÇÅ][i·µ£][1]
    H = œÉ^2 * blockdiag(kron(I(T), P.C‚ÇÅ'P.C‚ÇÅ), kron(I(T), P.D‚ÇÅ‚ÇÇ'P.D‚ÇÅ‚ÇÇ));

    # Unpacks the ADMM constant term (or creates a vector of zeros, if state-feedback)
    ŒΩ = vec([vcat(ŒΩ[1]...); vcat(ŒΩ[2]...)]);

    ## Creates the constraint matrix 
    # Dynamical constraints
    G_dyn_A =  I - kron(spdiagm(-1 => ones(T)), sparse(P.A));
    G_dyn_B = 0I - kron(spdiagm(-1 => ones(T)), sparse(P.B‚ÇÇ));
    G_dyn = [G_dyn_A[:,1:(P.Nx*T)]  G_dyn_B[:,1:(P.Nu*T)]];
    
    # Sparsity constraints 
    S_idx = [vcat([         (t-1)*P.Nx .+ findall(iszero, S‚Çì[t][s‚Çì,c‚±º[1]]) for t in 2:T]...);
             vcat([T*P.Nx + (t-1)*P.Nu .+ findall(iszero, S·µ§[t][s·µ§,c‚±º[1]]) for t in 1:T]...)]

    G_sp = sparse(1:length(S_idx), S_idx, ones(length(S_idx)), length(S_idx), (P.Nx+P.Nu)*T); 

    # -
    G = [G_dyn; G_sp];
    g = [IÃÉ; zeros(size(G,1)-P.Nx)];

    # Solves system of equations 
    Œ¶ = qr([H+œÅ*I G'; G 0I]) \ Array([œÅ*ŒΩ; g]);
    
    for t in 1:T 
        Œ¶ÃÉ[1][t][s‚Çì,c‚±º] .= S‚Çì[t][s‚Çì,c‚±º] .* Œ¶[(1:P.Nx).+(t-1)*P.Nx] ;
        Œ¶ÃÉ[2][t][s·µ§,c‚±º] .= S·µ§[t][s·µ§,c‚±º] .* Œ¶[(1:P.Nu).+(t-1)*P.Nu.+T*P.Nx] ;
    end
# --
end 

function _SLS_H2_General!(Œ¶ÃÉ::AbstractVector, c‚±º::AbstractVector, P::AbstractGeneralizedPlant, IÃÉ::AbstractMatrix, i·µ£::BitArray, T::Integer, ùì¢‚Çì::AbstractVector, ùì¢·µ§::AbstractVector, s‚Çì::AbstractVector, s·µ§::AbstractVector, ŒΩ::AbstractVector, œÅ::Real)
    # Retrieves the reduced-order state-space matrices
    A,B‚ÇÅ,B‚ÇÇ, C‚ÇÅ,D‚ÇÅ‚ÇÅ,D‚ÇÅ‚ÇÇ, C‚ÇÇ,D‚ÇÇ‚ÇÅ,D‚ÇÇ‚ÇÇ  = P;

    # Designs and solves the OCP associated with subsystem PÃÉ
    problem = Model(Ipopt.Optimizer); set_silent(problem)
    Œ¶‚Çì = [@variable(problem, [1:P.Nx,1:P.Nw]) for _ in 1:T];
    Œ¶·µ§ = [@variable(problem, [1:P.Nu,1:P.Nw]) for _ in 1:T];
    
    T_zw = _create_SLS_ref_operator(problem, [C‚ÇÅ D‚ÇÅ‚ÇÇ], Œ¶‚Çì, Œ¶·µ§, [B‚ÇÅ; D‚ÇÇ‚ÇÅ][i·µ£,:], D‚ÇÅ‚ÇÅ);

    @objective(problem,      Min,       norm(T_zw, :ùìó‚ÇÇ) + 0.5œÅ*norm([Œ¶‚Çì,Œ¶·µ§]-ŒΩ, :ùìó‚ÇÇ));
    @constraint(problem,                Œ¶‚Çì[1]   .== IÃÉ);
    @constraint(problem, [t = 1:(T-1)], Œ¶‚Çì[t+1] .== A*Œ¶‚Çì[t] + B‚ÇÇ*Œ¶·µ§[t]);
    @constraint(problem,                   0    .== A*Œ¶‚Çì[T] + B‚ÇÇ*Œ¶·µ§[T]);

    for t in 1:T
        fix.(Œ¶‚Çì[t][ùì¢‚Çì[t][s‚Çì,c‚±º] .‚â† 1], 0.0, force=true);
        fix.(Œ¶·µ§[t][ùì¢·µ§[t][s·µ§,c‚±º] .‚â† 1], 0.0, force=true);
    end
    
    optimize!(problem)

    for t in 1:T 
        Œ¶ÃÉ[1][t][s‚Çì,c‚±º] = ùì¢‚Çì[t][s‚Çì,c‚±º] .* value.(Œ¶‚Çì[t]);
        Œ¶ÃÉ[2][t][s·µ§,c‚±º] = ùì¢·µ§[t][s·µ§,c‚±º] .* value.(Œ¶·µ§[t]);
    end
end

# _______________________________________________________________________
# OPERATOR OVERLOADS / AUXILIARY FUNCTIONS ______________________________
function _create_SLS_ref_operator(problem::Model, L::AbstractMatrix, Œ¶ÃÉ‚Çì::Vector{Matrix{VariableRef}}, Œ¶ÃÉ·µ§::Vector{Matrix{VariableRef}}, R::AbstractMatrix, D::AbstractMatrix)
    return [@expression(problem, L*[Œ¶[1];Œ¶[2]]*R + D) for Œ¶ in zip(Œ¶ÃÉ‚Çì,Œ¶ÃÉ·µ§)]
end

LinearAlgebra.:norm(A::AbstractVector{T}, t::Symbol) where T = begin
    if t === :ùìó‚ÇÇ
        return sum([tr(A‚Çú'A‚Çú) for A‚Çú in A]) / (2œÄ);
    else        
        throw(ArgumentError("The argument '$(t)' is not a valid norm type."));
    end
end